{
	"jobConfig": {
		"name": "step_trainer_trusted_job.py",
		"description": "This job reads raw Step Trainer data from the landing zone, filters it to include only records belonging to customers who have both accelerometer data and have agreed to share their information, and writes the result to the trusted zone.",
		"role": "arn:aws:iam::470586301203:role/service-role/AWSGlueServiceRole",
		"command": "glueetl",
		"version": "5.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": 2,
		"maxCapacity": 2,
		"jobRunQueuingEnabled": false,
		"maxRetries": 0,
		"timeout": 480,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "step_trainer_etl",
		"scriptLocation": "s3://aws-glue-assets-470586301203-us-east-1/scripts/",
		"language": "python-3",
		"spark": true,
		"sparkConfiguration": "standard",
		"jobParameters": [],
		"tags": [],
		"jobMode": "DEVELOPER_MODE",
		"createdOn": "2025-05-06T13:40:57.342Z",
		"developerMode": true,
		"connectionsList": [],
		"temporaryDirectory": "s3://aws-glue-assets-470586301203-us-east-1/temporary/",
		"glueHiveMetastore": true,
		"etlAutoTuning": true,
		"bookmark": "job-bookmark-disable",
		"sparkPath": "s3://aws-glue-assets-470586301203-us-east-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"maintenanceWindow": null
	},
	"hasBeenSaved": false,
	"usageProfileName": null,
	"script": "import sys\r\nfrom pyspark.context import SparkContext\r\nfrom awsglue.context import GlueContext\r\nfrom awsglue.transforms import *\r\nfrom awsglue.utils import getResolvedOptions\r\nfrom awsglue.dynamicframe import DynamicFrame\r\nfrom awsglue.job import Job\r\n\r\n# Job setup\r\nargs = getResolvedOptions(sys.argv, ['JOB_NAME'])\r\nsc = SparkContext()\r\nglueContext = GlueContext(sc)\r\nspark = glueContext.spark_session\r\njob = Job(glueContext)\r\njob.init(args['JOB_NAME'], args)\r\n\r\n# 1. Load raw step trainer data from landing zone\r\nstep_trainer_landing = glueContext.create_dynamic_frame.from_options(\r\n    connection_type=\"s3\",\r\n    format=\"json\",\r\n    connection_options={\"paths\": [\"s3://stedi-project-userthompson/step_trainer_landing/\"]}\r\n)\r\n\r\n# 2. Load curated customer data\r\ncustomers_curated = glueContext.create_dynamic_frame.from_options(\r\n    connection_type=\"s3\",\r\n    format=\"json\",\r\n    connection_options={\"paths\": [\"s3://stedi-project-userthompson/curated/customers/\"]}\r\n)\r\n\r\n# Debug counts\r\nprint(\"Step Trainer Raw Count:\", step_trainer_landing.count())\r\nprint(\"Curated Customers Count:\", customers_curated.count())\r\n\r\n# 3. Join on serialNumber\r\njoined = Join.apply(\r\n    frame1=step_trainer_landing,\r\n    frame2=customers_curated,\r\n    keys1=[\"serialNumber\"],\r\n    keys2=[\"serialNumber\"]\r\n)\r\n\r\nprint(\"Joined Trusted Step Trainer Count:\", joined.count())\r\n\r\n# 4. Write output to trusted/step_trainer/\r\nglueContext.write_dynamic_frame.from_options(\r\n    frame=joined,\r\n    connection_type=\"s3\",\r\n    format=\"json\",\r\n    connection_options={\"path\": \"s3://stedi-project-userthompson/trusted/step_trainer/\"}\r\n)\r\n\r\njob.commit()\r\n\r\n"
}